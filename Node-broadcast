/*
** listener.c -- a datagram sockets "server" demo
*/

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>

#define MYPORT "441"    // the port users will be connecting to
#define MAXBUFLEN 100

// get sockaddr, IPv4 or IPv6:
int sockfd;
struct sockaddr_in sender_addr, send_addr;
char buf[MAXBUFLEN];

void setUpNode(void){
	    struct addrinfo hints, *servinfo, *p;
    int rv;
    char s[INET6_ADDRSTRLEN];
    struct hostent *he;
    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC; // set to AF_INET to force IPv4
    hints.ai_socktype = SOCK_DGRAM;
    hints.ai_flags = AI_PASSIVE; // use my IP
	
	

    if ((rv = getaddrinfo(NULL, MYPORT, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        exit(1);
    }

    // loop through all the results and bind to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("listener: socket");
            continue;
        }

        if (bind(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            close(sockfd);
            perror("listener: bind");
            continue;
        }

        break;
    }

    if (p == NULL) {
        fprintf(stderr, "listener: failed to bind socket\n");
        exit(1);
    }

    freeaddrinfo(servinfo);

    int broadcast = 1;
    //char broadcast = '1'; // if that doesn't work, try this
    if ((he=gethostbyname("10.0.0.0")) == NULL) {  // get the host info
        perror("gethostbyname");
        exit(1);
    }
    // this call is what allows broadcast packets to be sent:
    if (setsockopt(sockfd, SOL_SOCKET, SO_BROADCAST, &broadcast,
        sizeof broadcast) == -1) {
        perror("setsockopt (SO_BROADCAST)");
        exit(1);
    }
    send_addr.sin_family = AF_INET;     // host byte order
    send_addr.sin_port = htons(atoi(MYPORT)); // short, network byte order
    send_addr.sin_addr = *((struct in_addr *)he->h_addr);
    memset(send_addr.sin_zero, '\0', sizeof send_addr.sin_zero);
	printf("IP = %s Port = %s\n", inet_ntoa(send_addr.sin_addr) , MYPORT); 
	
}
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

int main(int argc, char *argv[])
{
	int numbytes;
	socklen_t addr_len;
	setUpNode();
    if ((numbytes=sendto(sockfd, argv[1], strlen(argv[1]), 0,
             (struct sockaddr *)&send_addr, sizeof send_addr)) == -1) {
        perror("sendto");
        exit(1);
    }
	printf("sent %d bytes to %s\n", numbytes,inet_ntoa(send_addr.sin_addr));
	
	
	////////////////////////////////////////////

    printf("listener: waiting to recvfrom...\n");

    addr_len = sizeof sender_addr;
    if ((numbytes = recvfrom(sockfd, buf, MAXBUFLEN-1 , 0,
        (struct sockaddr *)&sender_addr, &addr_len)) == -1) {
        perror("recvfrom");
        exit(1);
    }

    printf("listener: got packet from %s\n",
        inet_ntoa(sender_addr.sin_addr));
    printf("listener: packet is %d bytes long\n", numbytes);
    buf[numbytes] = '\0';
    printf("listener: packet contains \"%s\"\n", buf);
	
    close(sockfd);

    return 0;
}
